#############################
# Release Version	    #
# Version 1   : 11-Oct-2017 #
# Version 2   : 17-Oct-2017 #
# Version 3   : 06-Nov-2017 #
# Version 4   : 27-Nov-2017 #
# Version 5   : 08-DEC-2017 #
#############################


#!/bin/bash
clear
path=/var/tmp/patch
host=`uname -n | cut -d "." -f 1`
email="dl-henkel-unix-support@atos.net"
email1="suman.vodapalli@atos.net,sonu.bohit@atos.net"
dt=0
ntp=0
df=0
resolv=0
ip=0
route=0
oracledisk=0
emclun=0
emclunname=0
relay=0
sos=0
hw=0
hba=0
bt=0
crond=0
smb=0
send=0
post=0


prechecks()
{
	if [ -d $path/"$host"_checks ]; then
                rm -f $path/"$host"_checks/*.txt
        else
                mkdir -p $path/"$host"_checks
        fi
	uname -a > $path/"$host"_checks/"$host"_pre_uname.txt
	date > $path/"$host"_checks/"$host"_pre_date.txt
	ntpstat | head -n 1 | awk '{print $0, $1, $2, $3, $4}' > $path/"$host"_checks/"$host"_pre_ntpstat.txt
	ls -l /etc/localtime > $path/"$host"_checks/"$host"_pre_localtime.txt
	mount > $path/"$host"_checks/"$host"_pre_mount-command.txt
	cat /etc/mtab > $path/"$host"_checks/"$host"_pre_etc-mtab.txt
	cp -p /etc/resolv.conf $path/"$host"_checks/"$host"_pre_resolv.txt
	if [ -f /etc/mail/sendmail.cf ]; then
		cp -p /etc/mail/sendmail.cf $path/"$host"_checks/"$host"_pre_sendmail.txt
		cp -p /etc/mail/submit.cf $path/"$host"_checks/"$host"_pre_submit.txt
	fi
	if [ -f /etc/postfix/main.cf ]; then
		cp -p /etc/postfix/main.cf $path/"$host"_checks/"$host"_pre_postfix-main.txt
	fi
	cat /etc/redhat-release | grep -i "release 7"
	if [ $? = 0 ]; then
		df -Th | awk '{if ($2 != "tmpfs") print $0;}' | awk '{print $1, " ",$2, " ",$3, " ",$7}' > $path/"$host"_checks/"$host"_pre_df.txt
	else
		df -Th | while read line
		do
			a1=`echo $line | awk '{print $2}'`
			
			if [ "$a1" = "tmpfs" ]; then
				echo ""
			else
				a=`echo $line | awk '{if ($2 != "tmpfs") print $6;}' | cut -c 1`
				if [ "$a" = "/" ]; then
					echo $line | awk '{if ($2 != "tmpfs") print $0;}' | awk '{print $1, " ",$2, " ",$6}' >> $path/"$host"_checks/"$host"_pre_df.txt
				elif [[ $a =~ ^[0-9] ]]; then
					echo $line | awk '{if ($2 != "tmpfs") print $0;}'| awk '{print $1, " ",$2, " ",$3, " ",$7}' >> $path/"$host"_checks/"$host"_pre_df.txt
				else
					echo $line >> $path/"$host"_checks/"$host"_pre_df.txt
				fi
			fi
		done
	fi
	pvdisplay > $path/"$host"_checks/"$host"_pre_pvdisplay.txt
	vgdisplay > $path/"$host"_checks/"$host"_pre_vgdisplay.txt
	lvdisplay > $path/"$host"_checks/"$host"_pre_lvdisplay.txt
	rpm -qa | grep -i emcpower  > /dev/null 2>&1
	if [ $? = 0 ]; then
		ls -ltr /dev/emcpower* | awk '{print $10}' | sort > $path/"$host"_checks/"$host"_pre_emcpower-disk.txt
		rpm -qa | grep -i emcpower  > $path/"$host"_checks/"$host"_pre_emcpower-version.txt
		emcpadm export_mappings -f $path/"$host"_checks/`hostname`.EMC_LUNs-mappings_`date "+%d%m%y"`
		emcpadm check_mappings -f $path/"$host"_checks/`hostname`.EMC_LUNs-mappings_`date "+%d%m%y"` > $path/"$host"_checks/"$host"_pre_Lun-Mappings.txt
		for i in `powermt display dev=all|grep Pseudo|cut -d= -f2`; do echo -ne "$i \t"; powermt display dev=$i | grep Logical |cut -d= -f2; done | sort > $path/"$host"_checks/"$host"_pre_Lun-Pseudo.txt
		pw=`powermt display | sed '/===/,/===/d' | grep -v "device count" | grep -v "optimal" | wc -l`
		if [ $pw = 0 ]; then
			hba=1
		else
			hba=2
		fi
	fi
	touch $path/"$host"_checks/"$host"_pre_oracleasm-disk.txt
	if [ -d /dev/oracleasm/disks ]; then
		ls -ltr /dev/oracleasm/disks/ | awk '{print $10}' | sort > $path/"$host"_checks/"$host"_pre_oracleasm-disk.txt
		rpm -qa | grep -i oracleasm > $path/"$host"_checks/"$host"_pre_oracleasm-version.txt
	fi
	if [ -f /opt/VRTSvcs/bin/hastatus ]; then
		/opt/VRTSvcs/bin/hastatus -sum > $path/"$host"_checks/"$host"_pre_hastatus.txt
	fi
	netstat -nvr > $path/"$host"_checks/"$host"_pre_netstat.txt
	ip a | grep inet > $path/"$host"_checks/"$host"_pre_ip.txt
	touch $path/"$host"_checks/"$host"_pre_network-bonding.txt
	if [ -d /proc/net/bonding ]; then
		cat /proc/net/bonding/* > $path/"$host"_checks/"$host"_pre_network-bonding.txt
	fi
	cat /proc/mdstat > $path/"$host"_checks/"$host"_pre_mdstat.txt


	cat /etc/redhat-release | grep -i "release 7"
	if [ $? = 0 ]; then
		systemctl status smb | grep "Active:" | grep running
		if [ $? = 0 ]; then
			echo "smb running" >> $path/"$host"_checks/"$host"_pre_services.txt
		else
			echo "smb notrunning" >> $path/"$host"_checks/"$host"_pre_services.txt
		fi
		systemctl status crond | grep "Active:" | grep running
		if [ $? = 0 ]; then
			echo "crond running" >> $path/"$host"_checks/"$host"_pre_services.txt
		else
			echo "crond notrunning" >> $path/"$host"_checks/"$host"_pre_services.txt
		fi
		systemctl status sendmail | grep "Active:" | grep running
		if [ $? = 0 ]; then
			echo "sendmail running" >> $path/"$host"_checks/"$host"_pre_services.txt
		else
			echo "sendmail notrunning" >> $path/"$host"_checks/"$host"_pre_services.txt
		fi
		systemctl status postfix | grep "Active:" | grep running
		if [ $? = 0 ]; then
			echo "postfix running" >> $path/"$host"_checks/"$host"_pre_services.txt
		else
			echo "postfix notrunning" >> $path/"$host"_checks/"$host"_pre_services.txt
		fi
	else

		if [ -f /etc/init.d/smb ]; then
			/etc/init.d/smb status | grep running
			if [ $? = 0 ]; then
				echo "smb running" >> $path/"$host"_checks/"$host"_pre_services.txt
			else
				echo "smb notrunning" >> $path/"$host"_checks/"$host"_pre_services.txt
			fi
		else
			echo "smb notexists" >> $path/"$host"_checks/"$host"_pre_services.txt
		fi
		if [ -f /etc/init.d/crond ]; then
			/etc/init.d/crond status | grep running
			if [ $? = 0 ]; then
				echo "crond running" >> $path/"$host"_checks/"$host"_pre_services.txt
			else
				echo "crond notrunning" >> $path/"$host"_checks/"$host"_pre_services.txt
			fi
		else
			echo "crond notexists" >> $path/"$host"_checks/"$host"_pre_services.txt
		fi
		if [ -f /etc/init.d/sendmail ]; then
			/etc/init.d/sendmail status | grep running
			if [ $? = 0 ]; then
				echo "sendmail running" >> $path/"$host"_checks/"$host"_pre_services.txt
			else
				echo "sendmail notrunning" >> $path/"$host"_checks/"$host"_pre_services.txt
			fi
		else
			echo "sendmail notexists" >> $path/"$host"_checks/"$host"_pre_services.txt
		fi
		if [ -f /etc/init.d/postfix ]; then
			/etc/init.d/postfix status | grep running
			if [ $? = 0 ]; then
				echo "postfix running" >> $path/"$host"_checks/"$host"_pre_services.txt
			else
				echo "postfix notrunning" >> $path/"$host"_checks/"$host"_pre_services.txt
			fi
		else
			echo "postfix notexists" >> $path/"$host"_checks/"$host"_pre_services.txt
		fi

	fi
	
	if [ -f /opt/quest/bin/vastool ]; then
		/opt/quest/bin/vastool status | grep -i result | grep -w "No tests failed"
		if [ $? = 0 ]; then
			vas=0
		else
			vas=1
		fi
	else
		vas=2
	fi


	##################### Full Pretask #########################

	echo "########## uname ##########" > $path/"$host"_checks/"$host"_full_pretask.txt
	uname -a >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## MEMORY ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	free -m >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## /proc/meminfo ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /proc/meminfo | grep MemTotal >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## uptime ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	uptime >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## date ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	date >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## hwclock ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	hwclock >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ntpstat ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ntpstat >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## localtime ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ls -l /etc/localtime >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ntpq -p ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ntpq -p >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## /etc/redhat-release ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/redhat-release >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## rpm -qa ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	rpm -qa >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/redhat-release | grep -i "release 7"
	if [ $? = 0 ]; then
		echo "########## cat /boot/grub2/grub.cfg ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
		cat /boot/grub2/grub.cfg >> $path/"$host"_checks/"$host"_full_pretask.txt
	else		
		echo "########## cat /etc/grub.conf ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
		cat /etc/grub.conf >> $path/"$host"_checks/"$host"_full_pretask.txt
	fi
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/inittab ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/inittab >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/resolv.conf ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/resolv.conf >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/hosts ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/hosts >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## df -h ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	df -h >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## mount ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	mount >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/mtab ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/mtab >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/fstab ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/fstab >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/mail/sendmail.cf relay ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/mail/sendmail.cf | grep DS | grep -v "#" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/mail/submit.cf relay ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/mail/submit.cf | grep DS | grep -v "#" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/postfix/main.cf relay ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/postfix/main.cf | grep relay | grep -v "#" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ls -ltr /dev/emcpower* | wc -l ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ls -ltr /dev/emcpower* | wc -l >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ls -ltr /dev/emcpower* ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ls -ltr /dev/emcpower* >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ls -l /dev/oracleasm/disks/* | wc -l ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ls -l /dev/oracleasm/disks/* | wc -l >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ls -l /dev/oracleasm/disks ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ls -l /dev/oracleasm/disks >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## fdisk -l ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	fdisk -l >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## pvs ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	pvs >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## vgs ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	vgs -ao +devices >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## lvs ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	lvs -ao +devices >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## pvdisplay ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	pvdisplay >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## vgdisplay ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	vgdisplay >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## lvdisplay ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	lvdisplay >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## netstat -ntulp ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	netstat -ntulp >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## netstat -nrv ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	netstat -nrv >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ifconfig -a ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ifconfig -a >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ip a ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ip a >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## ip r ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	ip r >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/sysconfig/static-routes ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/sysconfig/static-routes >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/init.d/static-routes ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/init.d/static-routes >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /etc/sysconfig/network ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /etc/sysconfig/network >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /proc/net/bonding/* ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /proc/net/bonding/* >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## cat /proc/mdstat ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	cat /proc/mdstat  >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## mdadm --detail /dev/md* ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	mdadm --detail /dev/md* >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## /etc/init.d/vmware-tools status ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	/etc/init.d/vmware-tools status >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## powermt display ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	powermt display >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## powermt display dev=all ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	powermt display dev=all >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## powermt version ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	powermt version >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## Lun Mapping ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	for i in `powermt display dev=all|grep Pseudo|cut -d= -f2`; do echo -ne "$i \t"; powermt display dev=$i | grep Logical |cut -d= -f2; done >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt	
	echo "########## /opt/VRTSvcs/bin/hastatus ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	if [ -f /opt/VRTSvcs/bin/hastatus ]; then
		/opt/VRTSvcs/bin/hastatus -sum >> $path/"$host"_checks/"$host"_full_pretask.txt
	fi
	echo "" >> $path/"$host"_checks/"$host"_full_pretask.txt
	echo "########## vastool status ##########" >> $path/"$host"_checks/"$host"_full_pretask.txt
	/opt/quest/bin/vastool status >> $path/"$host"_checks/"$host"_full_pretask.txt


	powermt config
	powermt save
	powermt save file=$path/"$host"_checks/`uname -n`_powermt.`date "+%d%m%y"`

	##################################################################


	clear
	echo ""
	echo ""
	read -p "Do you want to run sosreport ? [y/n] : "  OPT
	echo ""
	echo ""

	if [ $OPT = "y" ] || [ $OPT = "Y" ]; then
		sos=1
		/usr/sbin/sosreport --batch --name "`uname -n | cut -d "." -f 1``date +"%b-%d-%Y_%H-%M"`"

		cat /etc/redhat-release | grep -i "release 7"
        	if [ $? = 0 ]; then
        		use=`df -h /boot | grep "/boot" | awk '{print $4}'| rev |cut -c2-| rev`
			use1=`df -h /boot | grep "/boot" | awk '{print $4}'`
                	if [ $use -lt 70 ]; then
                                bt=1
                        else
				bt=3
			fi
		fi
		cat /etc/redhat-release | grep -e "release 6" -e "release 5"
        	if [ $? = 0 ]; then
			use=`df -h /boot | grep "/boot" | awk '{print $4}'| rev |cut -c2-| rev`
			use1=`df -h /boot | grep "/boot" | awk '{print $4}'`
                	if [ $use -lt 60 ]; then	
				bt=2
                	else
				bt=3
			fi
		fi
	fi

	if [ -f /usr/sbin/hpacucli ] || [ -f /sbin/hpasmcli ]; then
		echo ""
		echo ""
		read -p "Do you want to check Hardware Status? [y/n] : "  OPT
		echo ""
		echo ""

		if [ $OPT = "y" ] || [ $OPT = "Y" ]; then
			hw=1	
			if [ -f /usr/sbin/hpacucli ]; then
				echo "######################### HDD Status #########################" > $path/"$host"_checks/"$host"_hardware_status.txt
				echo "######################### HDD Status #########################"
				echo ""
				/usr/sbin/hpacucli controller all show config >> $path/"$host"_checks/"$host"_hardware_status.txt
				/usr/sbin/hpacucli controller all show config
				read -n 1 -s -r -p "Press any key to continue..."
				echo ""
				echo ""
				echo "######################### Controller/Battery Status #########################" >> $path/"$host"_checks/"$host"_hardware_status.txt
				echo "######################### Controller/Battery Status #########################"
				echo ""
				/usr/sbin/hpacucli controller all show status >> $path/"$host"_checks/"$host"_hardware_status.txt
				/usr/sbin/hpacucli controller all show status 
				read -n 1 -s -r -p "Press any key to continue..."
				echo ""
				echo ""	
			fi
			if [ -f /sbin/hpasmcli ]; then
				echo "######################### Power Suply Status #########################" >> $path/"$host"_checks/"$host"_hardware_status.txt
				echo "######################### Power Suply Status #########################"
				echo ""
				/sbin/hpasmcli -s "show powersupply" >> $path/"$host"_checks/"$host"_hardware_status.txt
				/sbin/hpasmcli -s "show powersupply"
				read -n 1 -s -r -p "Press any key to continue..."
				echo ""
				echo ""
				echo "######################### FAN Status #########################" >> $path/"$host"_checks/"$host"_hardware_status.txt
				echo "######################### FAN Status #########################"
				echo ""
				/sbin/hpasmcli -s "show FAN" >> $path/"$host"_checks/"$host"_hardware_status.txt
				/sbin/hpasmcli -s "show FAN"
				read -n 1 -s -r -p "Press any key to continue..."
				echo ""
				echo ""
				echo "######################### DIMM Status #########################" >> $path/"$host"_checks/"$host"_hardware_status.txt
				echo "######################### DIMM Status #########################"
				echo ""
				/sbin/hpasmcli -s "show DIMM" >> $path/"$host"_checks/"$host"_hardware_status.txt
				/sbin/hpasmcli -s "show DIMM"
				read -n 1 -s -r -p "Press any key to continue..."
				echo ""
				echo ""
			fi
		fi
	fi



	echo "###################################################################################" > $path/"$host"_checks/"$host"_email.txt
	echo "#						SUMMARY				          	#" >> $path/"$host"_checks/"$host"_email.txt	
	echo "###################################################################################" >> $path/"$host"_checks/"$host"_email.txt
	echo "Uptime		  : `uptime | cut -d "," -f 1`" >> $path/"$host"_checks/"$host"_email.txt
	echo "Current Kernel	  :  `uname -r`" >> $path/"$host"_checks/"$host"_email.txt
	echo "OS Release 	  :  `cat /etc/redhat-release`" >> $path/"$host"_checks/"$host"_email.txt
	echo "Full Pretask	  :  $path/"$host"_checks/"$host"_full_pretask.txt" >> $path/"$host"_checks/"$host"_email.txt
	if [ $sos = 1 ]; then 
		echo "Sosreport	  :  Please transfer latest sosreport to jump server" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $hw = 1 ]; then
		echo "Hardware Status	  :  $path/"$host"_checks/"$host"_hardware_status.txt" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $bt = 1 ]; then
		echo "/boot FS space	  :  /boot is $use1 free, which is less then 70MB, MAKE SPACE FOR NEW KERNEL" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $bt = 2 ]; then
		echo "/boot FS space	  :  /boot is $use1 free, which is less then 60MB, MAKE SPACE FOR NEW KERNEL" >> $path/"$host"_checks/"$host"_email.txt	
	elif [ $bt = 3 ]; then
		echo "/boot FS space	  :  /boot is $use1 free, which is enough space for new kernel" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $hba = 1 ]; then
		echo -e "HBA Connectivity :  OK" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $hba = 2 ]; then
		echo -e "HBA Connectivity :  ISSUE. Please check 'powermt display' output." >> $path/"$host"_checks/"$host"_email.txt
	elif [ $hba = 0 ]; then
		echo -e "HBA Connectivity :  NA" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $vas = 0 ]; then
		echo -e "Vastool Status	  :  OK" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $vas = 1 ]; then
		echo -e "Vastool Status	  :  ISSUE" >> $path/"$host"_checks/"$host"_email.txt	
	elif [ $vas = 2 ]; then
		echo -e "Vastool Status	  :  NA" >> $path/"$host"_checks/"$host"_email.txt
	fi
	echo "###################################################################################" >> $path/"$host"_checks/"$host"_email.txt
	echo "" >> $path/"$host"_checks/"$host"_email.txt
	echo ""	>> $path/"$host"_checks/"$host"_email.txt		
	echo "" >> $path/"$host"_checks/"$host"_email.txt
	echo "" >> $path/"$host"_checks/"$host"_email.txt


	echo ""
	echo ""			
	echo ""
	echo ""

	echo "###################################################################################"
	echo "#					SUMMARY				          #"	
	echo "###################################################################################"
	echo -e "Uptime		 : \e[33m`uptime | cut -d "," -f 1`\e[\033[0;00m"
	echo -e "Current Kernel	 :  \e[33m`uname -r`\e[\033[0;00m"
	echo -e "OS Release 	 :  \e[33m`cat /etc/redhat-release`\e[\033[0;00m"
	echo -e "Full Pretask	 :  \e[33m$path/"$host"_checks/"$host"_full_pretask.txt\e[\033[0;00m"
	if [ $sos = 1 ]; then 
		echo -e "Sosreport	 :  \e[33mPlease transfer latest sosreport to jump server\e[\033[0;00m"
	fi
	if [ $hw = 1 ]; then
		echo -e "Hardware Status	:  \e[33m$path/"$host"_checks/"$host"_hardware_status.txt\e[\033[0;00m"
	fi
	if [ $bt = 1 ]; then
		echo -e "/boot FS space	 :  \e[31m/boot is $use1 free, which is less then 70MB, MAKE SPACE FOR NEW KERNEL\e[\033[0;00m"
	elif [ $bt = 2 ]; then
		echo -e "/boot FS space	 :  \e[31m/boot is $use1 free, which is less then 60MB, MAKE SPACE FOR NEW KERNEL\e[\033[0;00m"	
	elif [ $bt = 3 ]; then
		echo -e "/boot FS space	 :  \e[32m/boot is $use1 free, which is enough space for new kernel\e[\033[0;00m"
	fi
	if [ $hba = 1 ]; then
		echo -e "HBA Connectivity :  \e[32mOK\e[\033[0;00m"
	elif [ $hba = 2 ]; then
		echo -e "HBA Connectivity :  \e[31mISSUE. Please check 'powermt display' output.\e[\033[0;00m"
	elif [ $hba = 0 ]; then
		echo -e "HBA Connectivity :  NA"
	fi
	if [ $vas = 0 ]; then
		echo -e "Vastool Status	 :  \e[32mOK\e[\033[0;00m"
	elif [ $vas = 1 ]; then
		echo -e "Vastool Status	 :  \e[31mISSUE\e[\033[0;00m"	
	elif [ $vas = 2 ]; then
		echo -e "Vastool Status	 :  NA"
	fi
	echo "###################################################################################"

	echo ""
	echo ""


	if [ -f /usr/bin/mutt ]; then
		cat $path/"$host"_checks/"$host"_email.txt | mutt -s "Pretask of server `hostname`" -a $path/"$host"_checks/"$host"_full_pretask.txt $email
	else
		cat $path/"$host"_checks/"$host"_email.txt $path/"$host"_checks/"$host"_full_pretask.txt | mail -s "Pretask of server `hostname`" $email 
	fi

}

postchecks()
{

	if [ -d $path/"$host"_checks ]; then
                rm -f $path/"$host"_checks/*_post_*.txt
        else
                mkdir -p $path/"$host"_checks
        fi
	uname -a > $path/"$host"_checks/"$host"_post_uname.txt
	date > $path/"$host"_checks/"$host"_post_date.txt
	ntpstat | head -n 1 | awk '{print $0, $1, $2, $3, $4}' > $path/"$host"_checks/"$host"_post_ntpstat.txt
	ls -l /etc/localtime > $path/"$host"_checks/"$host"_post_localtime.txt
	mount > $path/"$host"_checks/"$host"_post_mount-command.txt
	cat /etc/mtab > $path/"$host"_checks/"$host"_post_etc-mtab.txt
	cp -p /etc/resolv.conf $path/"$host"_checks/"$host"_post_resolv.txt

	if [ -f /etc/mail/sendmail.cf ]; then
		cp -p /etc/mail/sendmail.cf $path/"$host"_checks/"$host"_post_sendmail.txt
		cp -p /etc/mail/submit.cf $path/"$host"_checks/"$host"_post_submit.txt
	fi
	if [ -f /etc/postfix/main.cf ]; then
		cp -p /etc/postfix/main.cf $path/"$host"_checks/"$host"_post_postfix-main.txt
	fi

	cat $path/"$host"_checks/"$host"_pre_services.txt | grep sendmail | grep -w running
	if [ $? = 0 ]; then
		postsend=`cat /etc/mail/sendmail.cf | grep DS | grep -v "#"`
		postsub=`cat /etc/mail/submit.cf | grep DS | grep -v "#"`

		presend=`cat $path/"$host"_checks/"$host"_pre_sendmail.txt | grep DS | grep -v "#"`
		presub=`cat $path/"$host"_checks/"$host"_pre_submit.txt | grep DS | grep -v "#"`

		if [ $presend = $postsend ] && [ $presub = $postsub ]; then
			relay=1
		fi
	fi
	cat $path/"$host"_checks/"$host"_pre_services.txt | grep postfix | grep -w running
	if [ $? = 0 ]; then
		postmain=`cat /etc/postfix/main.cf | grep relayhost | grep -v "#"`
		premain=`cat $path/"$host"_checks/"$host"_pre_postfix-main.txt | grep relayhost | grep -v "#"`

		if [ $premain = $postmain ]; then
			relay=1
		fi
	fi

	cat /etc/redhat-release | grep -i "release 7"
	if [ $? = 0 ]; then
		df -Th | awk '{if ($2 != "tmpfs") print $0;}' | awk '{print $1, " ",$2, " ",$3, " ",$7}' > $path/"$host"_checks/"$host"_post_df.txt

		systemctl status smb | grep "Active:" | grep running
		if [ $? = 0 ]; then
			echo "smb running" >> $path/"$host"_checks/"$host"_post_services.txt
		else
			echo "smb notrunning" >> $path/"$host"_checks/"$host"_post_services.txt
		fi
		systemctl status crond | grep "Active:" | grep running
		if [ $? = 0 ]; then
			echo "crond running" >> $path/"$host"_checks/"$host"_post_services.txt
		else
			echo "crond notrunning" >> $path/"$host"_checks/"$host"_post_services.txt
		fi
		systemctl status sendmail | grep "Active:" | grep running
		if [ $? = 0 ]; then
			echo "sendmail running" >> $path/"$host"_checks/"$host"_post_services.txt
		else
			echo "sendmail notrunning" >> $path/"$host"_checks/"$host"_post_services.txt
		fi
		systemctl status postfix | grep "Active:" | grep running
		if [ $? = 0 ]; then
			echo "postfix running" >> $path/"$host"_checks/"$host"_post_services.txt
		else
			echo "postfix notrunning" >> $path/"$host"_checks/"$host"_post_services.txt
		fi

	else

		if [ -f /etc/init.d/smb ]; then
			/etc/init.d/smb status | grep running
			if [ $? = 0 ]; then
				echo "smb running" >> $path/"$host"_checks/"$host"_post_services.txt
			else
				echo "smb notrunning" >> $path/"$host"_checks/"$host"_post_services.txt
			fi
		else
			echo "smb notexists" >> $path/"$host"_checks/"$host"_post_services.txt
		fi
		if [ -f /etc/init.d/crond ]; then
			/etc/init.d/crond status | grep running
			if [ $? = 0 ]; then
				echo "crond running" >> $path/"$host"_checks/"$host"_post_services.txt
			else
				echo "crond notrunning" >> $path/"$host"_checks/"$host"_post_services.txt
			fi
		else
			echo "crond notexists" >> $path/"$host"_checks/"$host"_post_services.txt
		fi
		if [ -f /etc/init.d/sendmail ]; then
			/etc/init.d/sendmail status | grep running
			if [ $? = 0 ]; then
				echo "sendmail running" >> $path/"$host"_checks/"$host"_post_services.txt
			else
				echo "sendmail notrunning" >> $path/"$host"_checks/"$host"_post_services.txt
			fi
		else
			echo "sendmail notexists" >> $path/"$host"_checks/"$host"_post_services.txt
		fi
		if [ -f /etc/init.d/postfix ]; then
			/etc/init.d/postfix status | grep running
			if [ $? = 0 ]; then
				echo "postfix running" >> $path/"$host"_checks/"$host"_post_services.txt
			else
				echo "postfix notrunning" >> $path/"$host"_checks/"$host"_post_services.txt
			fi
		else
			echo "postfix notexists" >> $path/"$host"_checks/"$host"_post_services.txt
		fi

		df -Th | while read line
		do
			a1=`echo $line | awk '{print $2}'`
			
			if [ "$a1" = "tmpfs" ]; then
				echo ""
			else
				a=`echo $line | awk '{if ($2 != "tmpfs") print $6;}' | cut -c 1`
				if [ "$a" = "/" ]; then
					echo $line | awk '{if ($2 != "tmpfs") print $0;}' | awk '{print $1, " ",$2, " ",$6}' >> $path/"$host"_checks/"$host"_post_df.txt
				elif [[ $a =~ ^[0-9] ]]; then
					echo $line | awk '{if ($2 != "tmpfs") print $0;}'| awk '{print $1, " ",$2, " ",$3, " ",$7}' >> $path/"$host"_checks/"$host"_post_df.txt
				else
					echo $line >> $path/"$host"_checks/"$host"_post_df.txt
				fi
			fi
		done
	fi

	pvdisplay > $path/"$host"_checks/"$host"_post_pvdisplay.txt
	vgdisplay > $path/"$host"_checks/"$host"_post_vgdisplay.txt
	lvdisplay > $path/"$host"_checks/"$host"_post_lvdisplay.txt
	e1=0
	rpm -qa | grep -i emcpower  > /dev/null 2>&1
	if [ $? = 0 ]; then
		ls -ltr /dev/emcpower* | awk '{print $10}' | sort > $path/"$host"_checks/"$host"_post_emcpower-disk.txt
		rpm -qa | grep -i emcpower  > $path/"$host"_checks/"$host"_post_emcpower-version.txt
		for i in `powermt display dev=all|grep Pseudo|cut -d= -f2`; do echo -ne "$i \t"; powermt display dev=$i | grep Logical |cut -d= -f2; done | sort > $path/"$host"_checks/"$host"_post_Lun-Pseudo.txt
		h=`hostname`
		emcmap=`ls -lhtr $path/"$host"_checks/"$h".EMC_LUNs-mappings_* | tail -1 | awk '{print $9}'`
		emcpadm check_mappings -f $emcmap > $path/"$host"_checks/"$host"_post_Lun-Mappings.txt
		pw=`powermt display | sed '/===/,/===/d' | grep -v "device count" | grep -v "optimal" | wc -l`
		if [ $pw = 0 ]; then
			hba=1
		else
			hba=2
		fi
		e1=1
	fi
	touch $path/"$host"_checks/"$host"_post_oracleasm-disk.txt
	if [ -d /dev/oracleasm/disks ]; then
		ls -ltr /dev/oracleasm/disks/ | awk '{print $10}' | sort > $path/"$host"_checks/"$host"_post_oracleasm-disk.txt
		rpm -qa | grep -i oracleasm > $path/"$host"_checks/"$host"_post_oracleasm-version.txt
	fi
	if [ -f /opt/VRTSvcs/bin/hastatus ]; then
		/opt/VRTSvcs/bin/hastatus -sum > $path/"$host"_checks/"$host"_post_hastatus.txt
	fi
	netstat -nvr > $path/"$host"_checks/"$host"_post_netstat.txt
	ip a | grep inet > $path/"$host"_checks/"$host"_post_ip.txt
	touch $path/"$host"_checks/"$host"_post_network-bonding.txt
	if [ -d /proc/net/bonding ]; then
		cat /proc/net/bonding/* > $path/"$host"_checks/"$host"_post_network-bonding.txt
	fi
	cat /proc/mdstat > $path/"$host"_checks/"$host"_post_mdstat.txt

	echo "" > $path/"$host"_checks/"$host"_DIFF.txt
        for i in `ls -l $path/"$host"_checks | grep ^- | awk '{print $9}' | grep post | awk -F'_' '{print $3}' | awk -F'.' '{print $1}'`
        do
                echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
                echo "$i Pre | Post" >> $path/"$host"_checks/"$host"_DIFF.txt
                echo "-------------------------------------" >> $path/"$host"_checks/"$host"_DIFF.txt
		diff -y --suppress-common-lines $path/"$host"_checks/"$host"_pre_"$i".txt $path/"$host"_checks/"$host"_post_"$i".txt > /dev/null 2>&1
		if [ $? = 0 ]; then
			echo "No Difference" >> $path/"$host"_checks/"$host"_DIFF.txt	
			if [ $i == "ntpstat" ]; then
				a=`cat $path/"$host"_checks/"$host"_post_date.txt | awk '{print $5}'`
				a1=`cat $path/"$host"_checks/"$host"_pre_date.txt | awk '{print $5}'`
				if [ "$a" == "$a1" ]; then
					dt=1
				else
					dt=3
				fi
				ntp=1
			elif [ $i == "df" ]; then
				df=1
			elif [ $i == "resolv" ]; then
				resolv=1
			elif [ $i == "ip" ]; then
				ip=1
			elif [ $i == "netstat" ]; then
				route=1
			elif [ $i == "oracleasm-disk" ]; then
				oracledisk=1
			elif [ $i == "emcpower-disk" ]; then
				emclun=1
			elif [ $i == "Lun-Mappings" ]; then
				emclunname=1
			fi
		else	
			if [ $i == "ntpstat" ]; then
				ntpstat | grep -w synchronised > /dev/null 2>&1
				if [ $? = 0 ]; then
					ntp=1
					a=`cat $path/"$host"_checks/"$host"_post_date.txt | awk '{print $5}'`
					a1=`cat $path/"$host"_checks/"$host"_pre_date.txt | awk '{print $5}'`
					if [ "$a" == "$a1" ]; then
						dt=1
					else
						dt=3
					fi
				else
					a=`cat $path/"$host"_checks/"$host"_post_date.txt | awk '{print $5}'`
					a1=`cat $path/"$host"_checks/"$host"_pre_date.txt | awk '{print $5}'`
					if [ "$a" == "$a1" ]; then
						dt=2
					else
						dt=3
					fi
					ntp=2
				fi
			elif [ $i == "df" ]; then
				df=2
			elif [ $i == "resolv" ]; then
				resolv=3
			elif [ $i == "ip" ]; then
				ip=3
			elif [ $i == "netstat" ]; then
				route=3
			elif [ $i == "oracleasm-disk" ]; then
				oracledisk=3
			elif [ $i == "emcpower-disk" ]; then
				emclun=3
			elif [ $i == "Lun-Mappings" ]; then
				emclunname=3
			fi
		fi
                diff -y --suppress-common-lines $path/"$host"_checks/"$host"_pre_"$i".txt $path/"$host"_checks/"$host"_post_"$i".txt >> $path/"$host"_checks/"$host"_DIFF.txt
                echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
                echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
        done

	echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
        echo "IPV6" >> $path/"$host"_checks/"$host"_DIFF.txt
        echo "-------------------------------------" >> $path/"$host"_checks/"$host"_DIFF.txt		
	ifconfig -a | grep -i inet6 > /dev/null 2>&1
	if [ $? = 0 ]; then
		echo "IPV6 is Enabled." >> $path/"$host"_checks/"$host"_DIFF.txt
		ipv6=1
	else
		echo "IPV6 is Disabled." >> $path/"$host"_checks/"$host"_DIFF.txt
		ipv6=2
	fi
        echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
        echo "" >> $path/"$host"_checks/"$host"_DIFF.txt

	if [ $e1 = 1 ]; then
		h=`hostname`
		emcmap=`ls -lhtr $path/"$host"_checks/"$h".EMC_LUNs-mappings_* | tail -1 | awk '{print $9}'`
		echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
		echo "emc check mappings" >> $path/"$host"_checks/"$host"_DIFF.txt
		echo "-------------------------------------" >> $path/"$host"_checks/"$host"_DIFF.txt
		echo "emcpadm check_mappings -f $emcmap" >> $path/"$host"_checks/"$host"_DIFF.txt
		emcpadm check_mappings -f $emcmap >> $path/"$host"_checks/"$host"_DIFF.txt
        	echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
        	echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
		echo "" >> $path/"$host"_checks/"$host"_DIFF.txt
		echo "powermt display" >> $path/"$host"_checks/"$host"_DIFF.txt
		echo "-------------------------------------" >> $path/"$host"_checks/"$host"_DIFF.txt
		powermt display >> $path/"$host"_checks/"$host"_DIFF.txt
	fi


	a1=`cat $path/"$host"_checks/"$host"_pre_services.txt | grep -w smb | awk '{print $2}'`
	a2=`cat $path/"$host"_checks/"$host"_post_services.txt | grep -w smb | awk '{print $2}'`
	if [ $a1 = $a2 ]; then
		smb=1
	fi
	a1=`cat $path/"$host"_checks/"$host"_pre_services.txt | grep -w crond | awk '{print $2}'`
	a2=`cat $path/"$host"_checks/"$host"_post_services.txt | grep -w crond | awk '{print $2}'`
	if [ $a1 = $a2 ]; then
		crond=1
	fi
	a1=`cat $path/"$host"_checks/"$host"_pre_services.txt | grep -w sendmail | awk '{print $2}'`
	a2=`cat $path/"$host"_checks/"$host"_post_services.txt | grep -w sendmail | awk '{print $2}'`
	if [ $a1 = $a2 ]; then
		send=1
	fi
	a1=`cat $path/"$host"_checks/"$host"_pre_services.txt | grep -w postfix | awk '{print $2}'`
	a2=`cat $path/"$host"_checks/"$host"_post_services.txt | grep -w postfix | awk '{print $2}'`
	if [ $a1 = $a2 ]; then
		post=1
	fi

	if [ -f /opt/quest/bin/vastool ]; then
		/opt/quest/bin/vastool status | grep -i result | grep -w "No tests failed"
		if [ $? = 0 ]; then
			vas=0
		else
			vas=1
		fi
	else
		vas=2
	fi

	echo "###################################################################################" > $path/"$host"_checks/"$host"_email.txt
	echo "#						SUMMARY					#"  >> $path/"$host"_checks/"$host"_email.txt	
	echo "###################################################################################" >> $path/"$host"_checks/"$host"_email.txt
	echo "#		KERNEL				|		`uname -r` #" >> $path/"$host"_checks/"$host"_email.txt
	if [ $dt = 1 ]; then
	echo "#		DATE				|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $dt = 2 ]; then
	echo "#		DATE				|		WARNING		  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $dt = 3 ]; then
	echo "#		DATE				|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $ntp = 1 ]; then
	echo "#		NTPSTAT				|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $ntp = 2 ]; then
	echo "#		NTPSTAT			|		WARNING			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $ntp = 3 ]; then
	echo "#		NTPSTAT				|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	use=`df -h /boot | grep "/boot" | awk '{print $5}'`
	use1=`echo "$use" | cut -d "%" -f 1`
	if (($use1 >= 90)); then
		echo "#		/boot				|		$use			  #" >> $path/"$host"_checks/"$host"_email.txt
	else
		echo "#		/boot				|		$use			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $df = 1 ]; then
	echo "#		DF				|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $df = 2 ]; then
	echo "#		DF				|		WARNING		  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $df = 3 ]; then
	echo "#		DF				|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $resolv = 1 ]; then
	echo "#		RESOLV.CONF			|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $resolv = 2 ]; then
	echo "#		RESOLV.CONF			|		WARNING			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $resolv = 3 ]; then
	echo "#		RESOLV.CONF			|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $ip = 1 ]; then
	echo "#		IP				|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $ip = 2 ]; then
	echo "#		IP				|		WARNING			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $ip = 3 ]; then
	echo "#		IP				|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $route = 1 ]; then
	echo "#		ROUTE				|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $route = 2 ]; then
	echo "#		ROUTE				|		WARNING			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $route = 3 ]; then
	echo "#		ROUTE				|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $oracledisk = 1 ]; then
	echo "#		ORACLEASM-DISKS		|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $oracledisk = 2 ]; then
	echo "#		ORACLEASM-DISKS			|		WARNING			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $oracledisk = 3 ]; then
	echo "#		ORACLEASM-DISKS			|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $emclun = 1 ]; then
	echo "#		EMC-DISKs			|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $emclun = 2 ]; then
	echo "#		EMC-DISKs			|		WARNING			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $emclun = 3 ]; then
	echo "#		EMC-DISKs			|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $emclunname = 1 ]; then
	echo "#		EMC-LUNS Name			|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $emclunname = 3 ]; then
	echo "#		EMC-LUNS Name			|		CHANGED			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $ipv6 = 1 ]; then
	echo "#		IPV6				|		ENABLE			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $ipv6 = 2 ]; then
	echo "#		IPV6				|		DISABLE	 	  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ -f $path/"$host"_checks/"$host"_post_emcpower-version.txt ];then
		echo "#		EMCPower Version		|		`cat $path/"$host"_checks/"$host"_post_emcpower-version.txt | cut -d "X" -f 2 | cut -c 2-`#" >> $path/"$host"_checks/"$host"_email.txt
	else
		echo "#		EMCPower Version		|		NA			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $crond = 1 ]; then
		echo "#		Cron Service			|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	else
		echo "#		Cron Service			|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $smb = 1 ]; then
		echo "#		SAMBA Service			|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	else
		echo "#		SAMBA Service			|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $send = 1 ]; then
		echo "#		Sendmail Service		|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	else
		echo "#		Sendmail Service		|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $post = 1 ]; then
		echo "#		Postfix Service			|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	else
		echo "#		Postfix Service			|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $relay = 1 ]; then
		echo "#		Email Relay			|		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	else
		echo "#		Email Relay			|		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $hba = 1 ]; then
		echo -e "#		HBA Connectivity	   |		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $hba = 2 ]; then
		echo -e "#		HBA Connectivity	   |		ISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $hba = 0 ]; then
		echo -e "#		HBA Connectivity	   |		NA			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi
	if [ $vas = 0 ]; then
		echo -e "#		Vastool	Status		   |		OK			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $vas = 1 ]; then
		echo -e "#		Vastool	Status		   |		mISSUE			  #" >> $path/"$host"_checks/"$host"_email.txt
	elif [ $vas = 2 ]; then
		echo -e "#		Vastool	Status		   |		NA			  #" >> $path/"$host"_checks/"$host"_email.txt
	fi

	echo "###################################################################################" >> $path/"$host"_checks/"$host"_email.txt



	clear

	echo "###################################################################################"
	echo "#					SUMMARY				          #"	
	echo "###################################################################################"
	echo -e "#		KERNEL			   |		`uname -r` #"
	if [ $dt = 1 ]; then
	echo -e "#		DATE			   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $dt = 2 ]; then
	echo -e "#		DATE			   |		\e[33mWARNING\e[\033[0;00m			  #"
	elif [ $dt = 3 ]; then
	echo -e "#		DATE			   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $ntp = 1 ]; then
	echo -e "#		NTPSTAT			   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $ntp = 2 ]; then
	echo -e "#		NTPSTAT			   |		\e[33mWARNING\e[\033[0;00m			  #"
	elif [ $ntp = 3 ]; then
	echo -e "#		NTPSTAT			   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	use=`df -h /boot | grep "/boot" | awk '{print $5}'`
	use1=`echo "$use" | cut -d "%" -f 1`
	if (($use1 >= 90)); then
		echo -e "#		/boot			   |		\e[31m$use\e[\033[0;00m			  #"
	else
		echo -e "#		/boot			   |		\e[32m$use\e[\033[0;00m			  #"
	fi
	if [ $df = 1 ]; then
	echo -e "#		DF			   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $df = 2 ]; then
	echo -e "#		DF			   |		\e[33mWARNING\e[\033[0;00m			  #"
	elif [ $df = 3 ]; then
	echo -e "#		DF			   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $resolv = 1 ]; then
	echo -e "#		RESOLV.CONF		   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $resolv = 2 ]; then
	echo -e "#		RESOLV.CONF		   |		\e[33mWARNING\e[\033[0;00m			  #"
	elif [ $resolv = 3 ]; then
	echo -e "#		RESOLV.CONF		   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $ip = 1 ]; then
	echo -e "#		IP			   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $ip = 2 ]; then
	echo -e "#		IP			   |		\e[33mWARNING\e[\033[0;00m			  #"
	elif [ $ip = 3 ]; then
	echo -e "#		IP			   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $route = 1 ]; then
	echo -e "#		ROUTE			   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $route = 2 ]; then
	echo -e "#		ROUTE			   |		\e[33mWARNING\e[\033[0;00m			  #"
	elif [ $route = 3 ]; then
	echo -e "#		ROUTE			   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $oracledisk = 1 ]; then
	echo -e "#		ORACLEASM-DISKS		   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $oracledisk = 2 ]; then
	echo -e "#		ORACLEASM-DISKS		   |		\e[33mWARNING\e[\033[0;00m			  #"
	elif [ $oracledisk = 3 ]; then
	echo -e "#		ORACLEASM-DISKS		   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $emclun = 1 ]; then
	echo -e "#		EMC-DISKS		   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $emclun = 2 ]; then
	echo -e "#		EMC-DISKS		   |		\e[33mWARNING\e[\033[0;00m			  #"
	elif [ $emclun = 3 ]; then
	echo -e "#		EMC-DISKS		   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $emclunname = 1 ]; then
	echo -e "#		EMC-LUNS Name		   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $emclunname = 3 ]; then
	echo -e "#		EMC-LUNS Name		   |		\e[31mCHANGED\e[\033[0;00m			  #"
	fi
	if [ $ipv6 = 1 ]; then
	echo -e "#		IPV6			   |		\e[31mENABLE\e[\033[0;00m			  #"
	elif [ $ipv6 = 2 ]; then
	echo -e "#		IPV6			   |		\e[32mDISABLE\e[\033[0;00m		 	  #"
	fi
	if [ -f $path/"$host"_checks/"$host"_post_emcpower-version.txt ];then
		echo -e "#		EMCPower Version	   |		`cat $path/"$host"_checks/"$host"_post_emcpower-version.txt | cut -d "X" -f 2 | cut -c 2-`#"
	else
		echo -e "#		EMCPower Version	   |		NA			  #"
	fi
	if [ $crond = 1 ]; then
		echo -e "#		Cron Service		   |		\e[32mOK\e[\033[0;00m			  #"
	else
		echo -e "#		Cron Service		   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $smb = 1 ]; then
		echo -e "#		SAMBA Service		   |		\e[32mOK\e[\033[0;00m			  #"
	else
		echo -e "#		SAMBA Service		   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $send = 1 ]; then
		echo -e "#		Sendmail Service	   |		\e[32mOK\e[\033[0;00m			  #"
	else
		echo -e "#		Sendmail Service	   |		\e[31mISSUE\e[\033[0;00m		  #"
	fi
	if [ $post = 1 ]; then
		echo -e "#		Postfix Service		   |		\e[32mOK\e[\033[0;00m			  #"
	else
		echo -e "#		Postfix Service 	   |		\e[31mISSUE\e[\033[0;00m		  #"
	fi
	if [ $relay = 1 ]; then
		echo -e "#		Email Relay		   |		\e[32mOK\e[\033[0;00m			  #"
	else
		echo -e "#		Email Relay		   |		\e[31mISSUE\e[\033[0;00m			  #"
	fi
	if [ $hba = 1 ]; then
		echo -e "#		HBA Connectivity	   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $hba = 2 ]; then
		echo -e "#		HBA Connectivity	   |		\e[31mISSUE\e[\033[0;00m			  #"
	elif [ $hba = 0 ]; then
		echo -e "#		HBA Connectivity	   |		NA			  #"
	fi
	if [ $vas = 0 ]; then
		echo -e "#		VASTOOL	Status		   |		\e[32mOK\e[\033[0;00m			  #"
	elif [ $vas = 1 ]; then
		echo -e "#		VASTOOL	Status		   |		\e[33mISSUE\e[\033[0;00m			  #"
	elif [ $vas = 2 ]; then
		echo -e "#		VASTOOL	Status		   |		NA			  #"
	fi	
	echo "###################################################################################"

	
        echo -e "\n \n \n"
        echo -e "Please check DIFF file : \e[33m$path/"$host"_checks/"$host"_DIFF.txt\e[\033[0;00m"
        echo -e "\n \n \n"

	
	if [ -f /usr/bin/mutt ]; then
		cat $path/"$host"_checks/"$host"_email.txt | mutt -s "Post check completed on server `hostname`" $email1
	else
		mail -s "Post check completed on server `hostname`" $email1 < $path/"$host"_checks/"$host"_email.txt
	fi

}

clear

echo "1. Prechecks"
echo "2. Postchecks"
echo "3. exit"
read -p "Please select your choice [1/2]: "  OPT

case $OPT in

"1")  
      echo ""
      echo ""
      read -p "Do you want to run Pretask ? [y/n] : "  OPT
      echo ""
      echo ""
      if [ $OPT = "y" ] || [ $OPT = "Y" ]; then
		prechecks
      fi
      ;;

"2")  postchecks
      ;;

"3")  exit
      ;;

*)  echo "$OPT is not a valid option"
      ;;

esac